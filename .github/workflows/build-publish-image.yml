name: Build and Publish Image

on:
  push:
    tags:
      - 'backend@*'
      - 'frontend-server@*'
      - 'nginx@*'
      - 'notes-db@*'
      - 'task-manager@*'

env:
  CI: true

jobs:
  build-image:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: 'IMAGE_NAME'

    steps:
      - name: Checkout 
        uses: actions/checkout@v4

      - name: Extract image name
        run: |
          TAG=${{ github.ref_name }}
          IMAGE_NAME=$(echo $TAG | sed 's/@.*//')
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: Validate image name
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          VALID_NAMES=("backend" "frontend-server" "nginx" "notes-db" "pgadmin4" "task-manager")
          if [[ ! "${VALID_NAMES[@]}" =~ "${IMAGE_NAME}" ]]; then
            echo "Error: Invalid image name '${IMAGE_NAME}'. Must be one of: ${VALID_NAMES[*]}."
            exit 1
          fi
          echo "Image name is ${IMAGE_NAME}"
      
      - name: Display image name
        run: echo "Image name is ${{ env.IMAGE_NAME }}"

      - name: Use Node.js 20.13.1
        uses: actions/setup-node@v4
        with:
          node-version: 20.13.1
          cache: 'npm'
        
      - name: Instal root deps
        run: npm ci --workspaces=false
  
      - name: Create package specific package-lock.json
        run: NODE_NO_WARNINGS=1 node --loader ts-node/esm ./tools/buildPackageLock.ts ${{ env.IMAGE_NAME }} force
  
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/notes-${{ env.IMAGE_NAME }}            
          # generate Docker tags based on the following events/attributes
          tags: |
            type=match,pattern=${{ env.IMAGE_NAME }}@(\d+\.\d+\.\d+),group=1
          flavor: |
            latest=true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./${{ env.IMAGE_NAME }}/Dockerfile
          context: ./${{ env.IMAGE_NAME }}
          target: prod

  publish-image:
    runs-on: ubuntu-latest

    needs: [build-image]

    permissions:
      id-token: write
      contents: read

    env:
      IMAGE_NAME: 'IMAGE_NAME'
      AWS_REGION: eu-central-1

    steps:
      - name: Checkout 
        uses: actions/checkout@v4

      - name: Extract image name
        run: |
          TAG=${{ github.ref_name }}
          IMAGE_NAME=$(echo $TAG | sed 's/@.*//')
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_SSM_ARN }}
          aws-region: ${{ env.AWS_REGION }}
